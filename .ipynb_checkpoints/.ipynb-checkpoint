{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pomoc do listy nr 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. pakiet Astroquery (Vizquery przez Python-a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1 Instrukcja instalacji:\n",
    "#### Linux: pip install [--user] astroquery\n",
    "#### Windows: python -m pip install [--user] astroquery"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.2 Przykłady użycia:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### a) Importowanie danych o obiekcie z wybranego katalogu, za pomocą VizieR-a (https://astroquery.readthedocs.io/en/latest/vizier/vizier.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TableList with 6 tables:\n",
      "\t'0:I/324/igsl3' with 18 column(s) and 7 row(s) \n",
      "\t'1:I/337/gaia' with 14 column(s) and 36 row(s) \n",
      "\t'2:I/345/gaia2' with 32 column(s) and 50 row(s) \n",
      "\t'3:I/347/gaia2dis' with 9 column(s) and 50 row(s) \n",
      "\t'4:VI/137/gum_mw' with 17 column(s) and 50 row(s) \n",
      "\t'5:VI/137/gum_gal' with 11 column(s) and 6 row(s) \n"
     ]
    }
   ],
   "source": [
    "from astroquery.vizier import Vizier\n",
    "result = Vizier.query_object(\"Sirius\", catalog=\"GAIA\")\n",
    "print result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   RA_ICRS     e_RA_ICRS    DE_ICRS     ...    e__FG_   __Gmag_      Var     \n",
      "     deg          mas         deg       ...     e-/s      mag                \n",
      "-------------- --------- -------------- ... ----------- ------- -------------\n",
      "101.2975121288     0.484 -16.7442509181 ...       94.07  16.517 NOT_AVAILABLE\n",
      "101.2929810929     0.684 -16.7317306305 ...         387  15.228 NOT_AVAILABLE\n",
      "101.3149745369     0.331 -16.7345157488 ...       413.9  13.302 NOT_AVAILABLE\n",
      "101.3037633154     0.269 -16.7223608014 ...       299.8  14.226 NOT_AVAILABLE\n",
      "101.3028875918     0.209 -16.7291608798 ...       288.3  14.606 NOT_AVAILABLE\n",
      "101.3217761411     0.096 -16.7175229181 ...       569.8  13.868 NOT_AVAILABLE\n",
      "101.3121857929     0.380 -16.7109134127 ...       105.2  16.520 NOT_AVAILABLE\n",
      "101.3177380736     0.105 -16.7170033714 ...        1016  13.052 NOT_AVAILABLE\n",
      "101.3150164680     0.197 -16.7220182846 ...         132  15.596 NOT_AVAILABLE\n",
      "101.2662442998     0.507 -16.7364517110 ...       89.92  16.898 NOT_AVAILABLE\n",
      "           ...       ...            ... ...         ...     ...           ...\n",
      "101.2792603122     0.165 -16.6899389371 ...       222.1  12.767 NOT_AVAILABLE\n",
      "101.2845651461     0.139 -16.6865887102 ...       92.45  15.906 NOT_AVAILABLE\n",
      "101.2854345026     1.806 -16.6887865837 ...       31.05  18.487 NOT_AVAILABLE\n",
      "101.2912261729     3.848 -16.6863759640 ...       69.21  16.646 NOT_AVAILABLE\n",
      "101.3196206486     0.405 -16.7064237642 ...       43.58  17.403 NOT_AVAILABLE\n",
      "101.3162327906     0.207 -16.7027896178 ...        3474  11.136 NOT_AVAILABLE\n",
      "101.3110455333     0.922 -16.6998174179 ...       34.87  17.873 NOT_AVAILABLE\n",
      "101.2990615312     2.045 -16.6849775067 ...       19.74  18.740 NOT_AVAILABLE\n",
      "101.3016304926     0.776 -16.6872078807 ...       32.81  18.036 NOT_AVAILABLE\n",
      "101.2950800062     0.089 -16.6853722150 ...       130.2  14.540 NOT_AVAILABLE\n",
      "Length = 36 rows\n"
     ]
    }
   ],
   "source": [
    "print result[1]    # wyświetla dane z katalogu I/337/gaia"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### b) Pobieranie danych o obiekcie z SIMBAD-a (https://astroquery.readthedocs.io/en/latest/simbad/simbad.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from astroquery.simbad import Simbad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "result_table = Simbad.query_object(\"SX Phe\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " MAIN_ID        RA           DEC      ... COO_WAVELENGTH     COO_BIBCODE    \n",
      "             \"h:m:s\"       \"d:m:s\"    ...                                   \n",
      "--------- ------------- ------------- ... -------------- -------------------\n",
      "V* SX Phe 23 46 32.8929 -41 34 54.770 ...              O 2018yCat.1345....0G\n"
     ]
    }
   ],
   "source": [
    "print result_table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Aby wyświetlić, a potem dodać lub usunąć pokazywane kolumny należy użyć funkcji:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--NOTES--\n",
      "\n",
      "1. The parameter filtername must correspond to an existing filter. Filters include: B,V,R,I,J,K.  They are checked by SIMBAD but not astroquery.simbad\n",
      "\n",
      "2. Fields beginning with rvz display the data as it is in the database. Fields beginning with rv force the display as a radial velocity. Fields beginning with z force the display as a redshift\n",
      "\n",
      "3. For each measurement catalog, the VOTable contains all fields of the first measurement. When applicable, the first measurement is the mean one. \n",
      "\n",
      "Available VOTABLE fields:\n",
      "\n",
      "bibcodelist(y1-y2)\n",
      "biblio\n",
      "cel\n",
      "cl.g\n",
      "coo(opt)\n",
      "coo_bibcode\n",
      "coo_err_angle\n",
      "coo_err_maja\n",
      "coo_err_mina\n",
      "coo_qual\n",
      "coo_wavelength\n",
      "coordinates\n",
      "dec(opt)\n",
      "dec_prec\n",
      "diameter\n",
      "dim\n",
      "dim_angle\n",
      "dim_bibcode\n",
      "dim_incl\n",
      "dim_majaxis\n",
      "dim_minaxis\n",
      "dim_qual\n",
      "dim_wavelength\n",
      "dimensions\n",
      "distance\n",
      "distance_result\n",
      "einstein\n",
      "fe_h\n",
      "flux(filtername)\n",
      "flux_bibcode(filtername)\n",
      "flux_error(filtername)\n",
      "flux_name(filtername)\n",
      "flux_qual(filtername)\n",
      "flux_system(filtername)\n",
      "flux_unit(filtername)\n",
      "fluxdata(filtername)\n",
      "gcrv\n",
      "gen\n",
      "gj\n",
      "hbet\n",
      "hbet1\n",
      "hgam\n",
      "id(opt)\n",
      "ids\n",
      "iras\n",
      "irc\n",
      "iso\n",
      "iue\n",
      "jp11\n",
      "link_bibcode\n",
      "main_id\n",
      "measurements\n",
      "membership\n",
      "mesplx\n",
      "mespm\n",
      "mk\n",
      "morphtype\n",
      "mt\n",
      "mt_bibcode\n",
      "mt_qual\n",
      "otype\n",
      "otype(opt)\n",
      "otypes\n",
      "parallax\n",
      "plx\n",
      "plx_bibcode\n",
      "plx_error\n",
      "plx_prec\n",
      "plx_qual\n",
      "pm\n",
      "pm_bibcode\n",
      "pm_err_angle\n",
      "pm_err_maja\n",
      "pm_err_mina\n",
      "pm_qual\n",
      "pmdec\n",
      "pmdec_prec\n",
      "pmra\n",
      "pmra_prec\n",
      "pos\n",
      "posa\n",
      "propermotions\n",
      "ra(opt)\n",
      "ra_prec\n",
      "rot\n",
      "rv_value\n",
      "rvz_bibcode\n",
      "rvz_error\n",
      "rvz_qual\n",
      "rvz_radvel\n",
      "rvz_type\n",
      "rvz_wavelength\n",
      "sao\n",
      "sp\n",
      "sp_bibcode\n",
      "sp_nature\n",
      "sp_qual\n",
      "sptype\n",
      "td1\n",
      "typed_id\n",
      "ubv\n",
      "uvby\n",
      "uvby1\n",
      "v*\n",
      "velocity\n",
      "xmm\n",
      "z_value\n",
      "For more information on a field:\n",
      "Simbad.get_field_description ('field_name') \n",
      "Currently active VOTABLE fields:\n",
      " ['main_id', 'coordinates']\n"
     ]
    }
   ],
   "source": [
    "Simbad.list_votable_fields()    # wyświetla wszystkie dostępne kolumny"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['main_id', 'coordinates']"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Simbad.get_votable_fields()             # aktualnie wyświetlane kolumny"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "Simbad.add_votable_fields('flux(V)')    # dodaje jasność w filtrze V"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "Simbad.add_votable_fields('pm')         # dodaje ruch własny"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "star = Simbad.query_object('SX Phe')    # tworzy słownik o nazwie star z tym co zwróci Simbad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " MAIN_ID        RA           DEC      ... PM_ERR_MAJA PM_ERR_MINA PM_ERR_ANGLE\n",
      "             \"h:m:s\"       \"d:m:s\"    ...   mas / yr    mas / yr      deg     \n",
      "--------- ------------- ------------- ... ----------- ----------- ------------\n",
      "V* SX Phe 23 46 32.8929 -41 34 54.770 ...       0.064       0.073           90\n"
     ]
    }
   ],
   "source": [
    "print star"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['MAIN_ID', 'RA', 'DEC', 'RA_PREC', 'DEC_PREC', 'COO_ERR_MAJA', 'COO_ERR_MINA', 'COO_ERR_ANGLE', 'COO_QUAL', 'COO_WAVELENGTH', 'COO_BIBCODE', 'FLUX_V', 'PMRA', 'PMDEC', 'PM_ERR_MAJA', 'PM_ERR_MINA', 'PM_ERR_ANGLE']\n"
     ]
    }
   ],
   "source": [
    "print star.keys()                       # wszystkie słowa kluczowe słownika"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " MAIN_ID \n",
      "---------\n",
      "V* SX Phe ['V* SX Phe']\n"
     ]
    }
   ],
   "source": [
    "print star['MAIN_ID'], star['MAIN_ID'].tolist()    # metoda .tolist() konwertuje wpis na listę"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15rc1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
